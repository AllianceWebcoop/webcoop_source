# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from odoo.exceptions import Warning, ValidationError, UserError
from datetime import datetime
from dateutil.relativedelta import relativedelta
import logging
import time

_logger = logging.getLogger(__name__)
DF = "%Y-%m-%d"
EPS = 0.00001

class LoanPayments(models.Model):
    _inherit = "wc.loan.payment"

    payment_reconciliation_id = fields.Many2one('wc.loan.payment.reconciliation', 
                                                'Reference', ondelete='restrict')
    payment_reconciliation_line_id = fields.Many2one('wc.loan.payment.reconciliation.line', 
                                                'Reference', ondelete='restrict')

    
    def reverse_payment_2(self):
        if self.payment_reconciliation_id:
            raise UserError(_("You cannot reverse this because this payment data was generated by Batch Reconcile."))
        if self.collection_id:
            raise UserError(_("You cannot reverse this because this payment data was generated by Collection entry."))
     
        self.reverse_payment()

#overwrite 
    @api.multi
    def reverse_payment(self):
        trcode_cbu = self.env.ref('wc_account.tr_adjustment')
        if not trcode_cbu:
            res = self.env['wc.tr.code'].search([
                ('trans_type','=','cbu'),
                ('name','ilike','Adjustment'),
            ])
            if not res:
                raise Warning(_("Cannot confirm transaction. No CBU adjustment transaction type present."))
            trcode_cbu = res[0]

        trcode_sa = self.env.ref('wc_account.tr_cm00')
        if not trcode_sa:
            res = self.env['wc.tr.code'].search([
                ('trans_type','=','sa'),
                ('name','ilike','Memo'),
            ])
            if not res:
                raise Warning(_("Cannot confirm transaction. No account adjustment transaction type present."))
            trcode_sa = res[0]

        for p in self:
            #check there is other payments after this
            res = self.search([
                ('loan_id','=',p.loan_id.id),
                ('date','>',p.date),
                ('state','=','confirmed'),
                ('is_reversed','=',False),
            ])
            if res:
                raise Warning(_("You can only reverse last payment."))

            p.is_reversed = True

            #change details for advance payments
            for det in p.advance_detail_ids:
                #det = self.env['wc.loan.detail'].search([
                #    ('advance_payment_id','=',p.id),
                #    ('loan_id','=',p.loan_id.id),
                #])
                principal_paid = 0.0
                date1 = p.loan_id.date_start
                for d in det:
                    principal_paid += d.principal_paid
                    date1 = d.date_start
                    d.principal_balance = 0.0
                    d.principal_due = 0.0
                    d.interest_due = 0.0
                    d.penalty = 0.0
                    d.no_others_due = True
                    d.state = 'reversed'

                if principal_paid>0.0:
                    ldet = self.env['wc.loan.detail'].search([
                        ('loan_id','=',p.loan_id.id),
                        ('date_due','=',p.loan_id.date_maturity),
                    ], order='date_due desc', limit=1)

                    #FIX: #240
                    if not ldet:
                        ldet = self.env['wc.loan.detail'].search([
                            ('loan_id','=',p.loan_id.id),
                            ('date_due','>',p.loan_id.date_maturity),
                            ('principal_due','=',0.0),
                        ], order='date_due desc', limit=1)

                    for d in ldet:
                        d.principal_balance = d.principal_balance + principal_paid
                        d.principal_due = d.principal_due + principal_paid
                        d.date_start = date1
                        d.interest_due = p.loan_id.compute_interest(
                            d.principal_balance,
                            date1,
                            d.date_due
                        )
                        #fix of #240
                        d.state = 'next_due'

            #fix bug #126 - change loan status to approved if paid and was reversed
            if p.loan_id.state=='paid' and p.amount>0.0:
                p.loan_id.state = 'approved'

#fix for bank reconciliation f562 start
            p2 = self.create({
                'company_id': p.company_id.id,
                'loan_id': p.loan_id.id,
                'or_number': p.or_number,
                'check_number': p.check_number,
                'amount': -p.amount,
                'name': 'Reverse Payment %s' % p.name,
                'is_reversed': True,
                'state': 'confirmed',
                'collection_id': p.collection_id.id,
                'payment_reconciliation_line_id': p.payment_reconciliation_line_id.id,#f562
                'payment_reconciliation_id': p.payment_reconciliation_id.id,#f562
            })
#fix for bank reconciliation f562 end
            for dist in p.distributions:
                deposit_account_id = dist.deposit_account_id
                if deposit_account_id:
                    if deposit_account_id.account_type=='cbu':
                        trtype_id = trcode_cbu.id
                    else:
                        trtype_id = trcode_sa.id
                    res = self.env['wc.account.transaction'].sudo().create({
                        'account_id': deposit_account_id.id,
                        'withdrawal': dist.amount,
                        'date': p2.date,
                        'trcode_id': trtype_id,
                        'reference': 'reverse payment',
                        'loan_id': p.loan_id.id,
                        'teller_id': self.env.user.id,
                    })
                    res.confirm()
                    res.approve()

                p2.distributions.create({
                    'payment_id': p2.id,
                    'detail_id': dist.detail_id.id,
                    'payment_type': dist.payment_type,
                    'code': dist.code,
                    'amount': -dist.amount,
                    'deposit_account_id' : deposit_account_id.id,
                    'gl_account_id': dist.gl_account_id.id,
                })
#

